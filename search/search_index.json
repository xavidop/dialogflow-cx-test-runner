{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dialogflow CX CLI","text":"<p>  </p> <p><code>cxcli</code> is a tool that helps Dialogflow CX users to test their projects and interact with them in multiple ways. It is useful for your day-today taks or if you want to integrate it in your favorite CI.</p> <p>This CLI also has text-to-speech and speech-to text capabilities allowing the interaction with Google Cloud Platform APIs.</p>"},{"location":"#get-started","title":"Get started","text":"<ul> <li>How to install the tool</li> <li>Authentication</li> <li>Read the FAQ</li> </ul>"},{"location":"#got-questions-comments-or-suggestions","title":"Got questions, comments or suggestions?","text":"<p><code>cxcli</code> is developed by xavidop.</p> <p>You can contact us via email at: dialogflowcxcli@gmail.com</p> <p>Follow @dialogflowcxcli on Twitter for updates and announcements</p> <p>Visit our links section for more information about how stay in touch with us</p>"},{"location":"ci/","title":"CI","text":"<p>TBD</p>"},{"location":"links/","title":"Links","text":"<ul> <li>Follow the progress on the GitHub repository</li> <li>Follow us on Twitter and Mastodon for updates</li> <li>Join our Discord server</li> <li>Read my blog</li> <li>Sign up for my Newsletter</li> <li>For questions, support and general discussion, please use Discord or GitHub Discussions</li> <li>Contributing Guidelines</li> <li>Security Policy</li> </ul> <p>This project adheres to the Contributor Covenant code of conduct. By participating, you are expected to uphold this code.</p>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#supported-versions","title":"Supported Versions","text":"<p>Only the last stable version at any given point.</p>"},{"location":"security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>Vulnerabilities can be disclosed via email to dialogflowcxcli@gmail.com</p>"},{"location":"stt/","title":"Speech-to-text","text":"<p>  </p> <p><code>cxcli</code> has some commands that allows you to interact with Google Cloud Text to Speech service using the <code>Cloud Speech-to-text API</code>!</p>  <p>Is this your first time using this feature?</p> <p>Before you start using this functionality, please, read the authentication page.</p>"},{"location":"stt/#usage","title":"Usage","text":"<p>You can find the speech-to-text commands usage down the <code>cxcli stt</code> command. You can read the documentation about this command here.</p> <p>The <code>cxcli stt</code> root command has the <code>recognize</code> command. You can find the usage of this command here.</p>"},{"location":"stt/#parameters","title":"Parameters","text":"<p>These are the relevant parameters that you can use to interact with Google Cloud stt:</p> <ol> <li><code>locale</code>: the locale accepts all the locales accepted by the Google <code>Cloud Speech-to-text API</code>. You can find all the locales available here</li> </ol>"},{"location":"stt/#audio-input-file","title":"Audio input file","text":"<p>It is important to know that the input has to have this format:</p> <ol> <li>A Sample Rate Hertz of 16000Hz</li> <li>The audio encoding has to be be Linear16. Linear16 is a 16-bit linear pulse-code modulation (PCM) encoding.</li> </ol> <p>If you don't have a file with this format, you can create it by yourself using the <code>cxcli tts</code> command! All the information is located here</p>"},{"location":"stt/#example","title":"Example","text":"<p>This a simple example of the <code>cxcli stt recognize</code> command:</p> <pre><code>cxcli stt recognize hi.mp3  --locale en-US\n</code></pre> <p>The command above will give you an audio file like this one:</p> <pre><code>$ cxcli stt recognize hi.mp3 --locale en-US --verbose\nINFO Duration time: 570 miliseconds               \nINFO Detections: 1                                \nINFO 1. Text detected: hi                         \nINFO 1. Confidence: 79.276474%                     \n</code></pre>  <p>are you running this command in a CICD pipeline?</p> <p>If this is the case, we recommend you to execute with the <code>--output-format</code> parameter set to <code>json</code>.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#getting-support","title":"Getting support","text":"<p>All users have access to a public Discord support for support and collaboration. Check the links page.</p>"},{"location":"troubleshooting/#project-not-found","title":"Project not found","text":"<p>Make sure that you have configured either the gcloud CLI or the authentication <code>json</code> file properly.</p> <p>You can find more information in the Authentication page.</p>"},{"location":"troubleshooting/#you-need-to-enable-the-dialogflow-api","title":"You need to enable the Dialogflow API","text":"<p>You have to enable the <code>Dialogflow API</code> on your GCP project if you want to interact with the <code>cxcli</code>. Make sure you have the permissions needed for the tool.</p> <p>You can find more information in the Authentication page.</p>"},{"location":"troubleshooting/#you-need-to-enable-the-cloud-speech-to-text-api","title":"You need to enable the Cloud Speech-to-text API","text":"<p>You have to enable the <code>Cloud Speech-to-text API</code> on your GCP project if you want to run the <code>cxcli stt</code> commands.</p> <p>You can find more information in the Authentication page.</p>"},{"location":"troubleshooting/#you-need-to-enable-the-cloud-text-to-speech-api","title":"You need to enable the Cloud Text-to-speech API","text":"<p>You have to enable the <code>Cloud Text-to-speech API</code> on your GCP project if you want to run the <code>cxcli tts</code> commands</p> <p>You can find more information in the Authentication page.</p>"},{"location":"tts/","title":"Text-to-speech","text":"<p>  </p> <p><code>cxcli</code> has some commands that allows you to interact with Google Cloud Text to Speech service using the <code>Cloud Text-to-Speech API</code>!</p>  <p>Is this your first time using this feature?</p> <p>Before you start using this functionality, please, read the authentication page.</p>"},{"location":"tts/#usage","title":"Usage","text":"<p>You can find the text-to-speech commands usage down the <code>cxcli tts</code> command. You can read the documentation about this command here.</p> <p>The <code>cxcli tts</code> root command has the <code>synthesize</code> command. You can find the usage of this command here.</p>"},{"location":"tts/#parameters","title":"Parameters","text":"<p>These are the relevant parameters that you can use to interact with Google Cloud tts:</p> <ol> <li><code>locale</code>: the locale accepts all the locales accepted by the Google <code>Cloud Text-to-speech API</code>. You can find all the locales available here</li> <li><code>output-file</code>: mp3 file where we are going to write the synthesize text</li> </ol>"},{"location":"tts/#output","title":"Output","text":"<p>It is important to know that the output will have this format:</p> <ol> <li>A Sample Rate Hertz of 16000Hz</li> <li>The audio encoding will be Linear16. Linear16 is a 16-bit linear pulse-code modulation (PCM) encoding.</li> </ol>"},{"location":"tts/#example","title":"Example","text":"<p>This a simple example of the <code>cxcli tts synthesize</code> command:</p> <pre><code>cxcli tts synthesize hi --locale en-US --output-file hi.mp3\n</code></pre> <p>The command above will give you an audio file like this one:</p> <p>  Your browser does not support the audio element. </p> <p>You can download the audio file here</p>"},{"location":"agents/delete/","title":"Delete","text":""},{"location":"agents/delete/#usage","title":"Usage","text":"<p>You can find the delete command usage down the <code>cxcli agent delete</code> command. You can read the documentation about this command here.</p>"},{"location":"agents/delete/#example","title":"Example","text":"<p>This a simple example of the <code>cxcli agent delete</code> command:</p> <pre><code>cxcli agent delete test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The command above will give you an output like this one:</p> <pre><code>$ cxcli agent delete test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Agent deleted                          \n</code></pre>"},{"location":"agents/delete/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX Agent deletion, check the official documentation.</p>"},{"location":"agents/export/","title":"Export","text":""},{"location":"agents/export/#usage","title":"Usage","text":"<p>You can find the export command usage down the <code>cxcli agent export</code> command. You can read the documentation about this command here.</p>  <p>Exported file format</p> <p>Right now the Dialogflow CX API only supports exporting the agent in <code>blob</code> format. Once the <code>json</code> format is supported, we will add it in the tool.</p>"},{"location":"agents/export/#example","title":"Example","text":"<p>This a simple example of the <code>cxcli agent export</code> command:</p> <pre><code>cxcli agent export test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The command above will give you an output like this one:</p> <pre><code>$ cxcli agent export test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Agent exported to file: agent.blob                    \n</code></pre>  <p>are you running this command in a CICD pipeline?</p> <p>If this is the case, we recommend you to execute with the <code>--output-format</code> parameter set to <code>json</code>.</p>"},{"location":"agents/export/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX exports, check the official documentation.</p>"},{"location":"agents/introduction/","title":"Agents","text":""},{"location":"agents/introduction/#what-is-this","title":"What is this?","text":"<p>An agent in Dialogflow CX is the entity that handles all the conversations that we have defined on the Dialogflow CX console with the end users.</p> <p>An agent is basically an assistant that will manage the state of each user's conversation when the end users are interacting with the agent through text or audio in multiple channels.</p> <p>With the <code>cxcli</code> you can interact easily with your Dialogflow CX agents.</p> <p>All the commands that you have available in the <code>cxcli</code> to interact with your agents are located down the <code>cxcli agent</code> command.</p>"},{"location":"agents/introduction/#restore","title":"Restore","text":"<p>You can restore an agent using a <code>blob</code> file. Right now the Dialogflow CX API, used by the <code>cxcli</code>, only works with the <code>blob</code> format.</p> <p>The <code>cxcli</code> has a command that allows you to restore an agent. You can find the whole explanation here</p>"},{"location":"agents/introduction/#export","title":"Export","text":"<p>An agent can be exported as a <code>blob</code> file. Right now the Dialogflow CX API, used by the <code>cxcli</code>, only works with the <code>blob</code> format.</p> <p>The <code>cxcli</code> has a command that allows you to export your agent. You can find the whole explanation here</p>"},{"location":"agents/introduction/#delete","title":"Delete","text":"<p>The <code>cxcli</code> has a command that allows you to delete your agent. You can find the whole explanation here</p>"},{"location":"agents/introduction/#useful-links","title":"Useful Links","text":"<p>If you want to check the full usage of the <code>cxcli agent</code> command, please refer to this page.</p> <p>If you want to learn more about Dialogflow CX agents, check the official documentation.</p>"},{"location":"agents/restore/","title":"Restore","text":""},{"location":"agents/restore/#usage","title":"Usage","text":"<p>You can find the restore command usage down the <code>cxcli agent restore</code> command. You can read the documentation about this command here.</p>  <p>File format to be restored</p> <p>Right now the Dialogflow CX API only supports restoring the agent in <code>blob</code> format. Once the <code>json</code> format is supported, we will add it in the tool.</p>"},{"location":"agents/restore/#example","title":"Example","text":"<p>This a simple example of the <code>cxcli agent restore</code> command:</p> <pre><code>cxcli agent restore test-agent --project-id test-cx-346408 --location-id us-central1 --input agent.blob\n</code></pre> <p>The command above will give you an output like this one:</p> <pre><code>$ cxcli agent restore test-agent --project-id test-cx-346408 --location-id us-central1 --input agent.blob\nINFO Agent restored \n</code></pre>  <p>are you running this command in a CICD pipeline?</p> <p>If this is the case, we recommend you to execute with the <code>--output-format</code> parameter set to <code>json</code>.</p>"},{"location":"agents/restore/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX restores, check the official documentation.</p>"},{"location":"cmd/cxcli/","title":"cxcli","text":"<p>Dialogflow CX CLI</p>"},{"location":"cmd/cxcli/#synopsis","title":"Synopsis","text":"<p>Welcome to cxcli!</p> <p>This utility provides you with an easy way to interact with your Dialogflow CX agents. </p> <p>You can find the documentation at https://github.com/xavidop/dialogflow-cx-cli.</p> <p>Please file all bug reports on Github at https://github.com/xavidop/dialogflow-cx-cli/issues.</p> <pre><code>cxcli [flags]\n</code></pre>"},{"location":"cmd/cxcli/#options","title":"Options","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -h, --help                   help for cxcli\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli/#see-also","title":"See also","text":"<ul> <li>cxcli agent   - Actions on agent commands</li> <li>cxcli completion     - Generate the autocompletion script for the specified shell</li> <li>cxcli entity-type   - Actions on entity type commands</li> <li>cxcli environment   - Actions on environment</li> <li>cxcli intent     - Actions on intent commands</li> <li>cxcli jsonschema     - outputs cxcli's JSON schema</li> <li>cxcli profile-nlu   - Actions on testing</li> <li>cxcli stt   - Actions on speech-to-text commands</li> <li>cxcli tts   - Actions on text-to-speech commands</li> <li>cxcli version   - Get cxcli version</li> </ul>"},{"location":"cmd/cxcli_agent/","title":"cxcli agent","text":"<p>Actions on agent commands</p> <pre><code>cxcli agent [flags]\n</code></pre>"},{"location":"cmd/cxcli_agent/#options","title":"Options","text":"<pre><code>  -h, --help   help for agent\n</code></pre>"},{"location":"cmd/cxcli_agent/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_agent/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli agent delete     - Deletes a specific agent</li> <li>cxcli agent export     - Executes an export for a specific agent</li> <li>cxcli agent restore   - Executes a restore action for a specific agent</li> </ul>"},{"location":"cmd/cxcli_agent_delete/","title":"cxcli agent delete","text":"<p>Deletes a specific agent</p> <pre><code>cxcli agent delete [agent-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_agent_delete/#options","title":"Options","text":"<pre><code>  -h, --help                 help for delete\n  -l, --location-id string   Dialogflow CX Location ID of the Project\n  -p, --project-id string    Dialogflow CX Project ID\n</code></pre>"},{"location":"cmd/cxcli_agent_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_agent_delete/#see-also","title":"See also","text":"<ul> <li>cxcli agent   - Actions on agent commands</li> </ul>"},{"location":"cmd/cxcli_agent_export/","title":"cxcli agent export","text":"<p>Executes an export for a specific agent</p> <pre><code>cxcli agent export [agent-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_agent_export/#options","title":"Options","text":"<pre><code>  -h, --help                 help for export\n  -l, --location-id string   Dialogflow CX Location ID of the Project\n  -f, --output-file string   Output file name (default \"agent.blob\")\n  -p, --project-id string    Dialogflow CX Project ID\n</code></pre>"},{"location":"cmd/cxcli_agent_export/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_agent_export/#see-also","title":"See also","text":"<ul> <li>cxcli agent   - Actions on agent commands</li> </ul>"},{"location":"cmd/cxcli_agent_restore/","title":"cxcli agent restore","text":"<p>Executes a restore action for a specific agent</p> <pre><code>cxcli agent restore [agent-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_agent_restore/#options","title":"Options","text":"<pre><code>  -h, --help                 help for restore\n  -i, --input string         Input file name (default \"agent.blob\")\n  -l, --location-id string   Dialogflow CX Location ID of the Project\n  -p, --project-id string    Dialogflow CX Project ID\n</code></pre>"},{"location":"cmd/cxcli_agent_restore/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_agent_restore/#see-also","title":"See also","text":"<ul> <li>cxcli agent   - Actions on agent commands</li> </ul>"},{"location":"cmd/cxcli_completion/","title":"cxcli completion","text":"<p>Generate the autocompletion script for the specified shell</p>"},{"location":"cmd/cxcli_completion/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for cxcli for the specified shell. See each sub-command's help for details on how to use the generated script.</p>"},{"location":"cmd/cxcli_completion/#options","title":"Options","text":"<pre><code>  -h, --help   help for completion\n</code></pre>"},{"location":"cmd/cxcli_completion/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_completion/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli completion bash   - Generate the autocompletion script for bash</li> <li>cxcli completion fish   - Generate the autocompletion script for fish</li> <li>cxcli completion powershell   - Generate the autocompletion script for powershell</li> <li>cxcli completion zsh     - Generate the autocompletion script for zsh</li> </ul>"},{"location":"cmd/cxcli_completion_bash/","title":"cxcli completion bash","text":"<p>Generate the autocompletion script for bash</p>"},{"location":"cmd/cxcli_completion_bash/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the bash shell.</p> <p>This script depends on the 'bash-completion' package. If it is not installed already, you can install it via your OS's package manager.</p> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(cxcli completion bash)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"cmd/cxcli_completion_bash/#linux","title":"Linux:","text":"<pre><code>cxcli completion bash &gt; /etc/bash_completion.d/cxcli\n</code></pre>"},{"location":"cmd/cxcli_completion_bash/#macos","title":"macOS:","text":"<pre><code>cxcli completion bash &gt; $(brew --prefix)/etc/bash_completion.d/cxcli\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>cxcli completion bash\n</code></pre>"},{"location":"cmd/cxcli_completion_bash/#options","title":"Options","text":"<pre><code>  -h, --help              help for bash\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cmd/cxcli_completion_bash/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_completion_bash/#see-also","title":"See also","text":"<ul> <li>cxcli completion     - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cmd/cxcli_completion_fish/","title":"cxcli completion fish","text":"<p>Generate the autocompletion script for fish</p>"},{"location":"cmd/cxcli_completion_fish/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the fish shell.</p> <p>To load completions in your current shell session:</p> <pre><code>cxcli completion fish | source\n</code></pre> <p>To load completions for every new session, execute once:</p> <pre><code>cxcli completion fish &gt; ~/.config/fish/completions/cxcli.fish\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>cxcli completion fish [flags]\n</code></pre>"},{"location":"cmd/cxcli_completion_fish/#options","title":"Options","text":"<pre><code>  -h, --help              help for fish\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cmd/cxcli_completion_fish/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_completion_fish/#see-also","title":"See also","text":"<ul> <li>cxcli completion     - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cmd/cxcli_completion_powershell/","title":"cxcli completion powershell","text":"<p>Generate the autocompletion script for powershell</p>"},{"location":"cmd/cxcli_completion_powershell/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for powershell.</p> <p>To load completions in your current shell session:</p> <pre><code>cxcli completion powershell | Out-String | Invoke-Expression\n</code></pre> <p>To load completions for every new session, add the output of the above command to your powershell profile.</p> <pre><code>cxcli completion powershell [flags]\n</code></pre>"},{"location":"cmd/cxcli_completion_powershell/#options","title":"Options","text":"<pre><code>  -h, --help              help for powershell\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cmd/cxcli_completion_powershell/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_completion_powershell/#see-also","title":"See also","text":"<ul> <li>cxcli completion     - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cmd/cxcli_completion_zsh/","title":"cxcli completion zsh","text":"<p>Generate the autocompletion script for zsh</p>"},{"location":"cmd/cxcli_completion_zsh/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the zsh shell.</p> <p>If shell completion is not already enabled in your environment you will need to enable it.  You can execute the following once:</p> <pre><code>echo \"autoload -U compinit; compinit\" &gt;&gt; ~/.zshrc\n</code></pre> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(cxcli completion zsh); compdef _cxcli cxcli\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"cmd/cxcli_completion_zsh/#linux","title":"Linux:","text":"<pre><code>cxcli completion zsh &gt; \"${fpath[1]}/_cxcli\"\n</code></pre>"},{"location":"cmd/cxcli_completion_zsh/#macos","title":"macOS:","text":"<pre><code>cxcli completion zsh &gt; $(brew --prefix)/share/zsh/site-functions/_cxcli\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>cxcli completion zsh [flags]\n</code></pre>"},{"location":"cmd/cxcli_completion_zsh/#options","title":"Options","text":"<pre><code>  -h, --help              help for zsh\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cmd/cxcli_completion_zsh/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_completion_zsh/#see-also","title":"See also","text":"<ul> <li>cxcli completion     - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cmd/cxcli_entity-type/","title":"cxcli entity-type","text":"<p>Actions on entity type commands</p> <pre><code>cxcli entity-type [flags]\n</code></pre>"},{"location":"cmd/cxcli_entity-type/#options","title":"Options","text":"<pre><code>  -h, --help   help for entity-type\n</code></pre>"},{"location":"cmd/cxcli_entity-type/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_entity-type/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli entity-type create     - Creates an entity type in an agent</li> <li>cxcli entity-type delete     - Deletes an entity type in an agent</li> </ul>"},{"location":"cmd/cxcli_entity-type_create/","title":"cxcli entity-type create","text":"<p>Creates an entity type in an agent</p> <pre><code>cxcli entity-type create [entity-type-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_entity-type_create/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name\n  -n, --entities strings     List of the entities for this entity type, comma separated. Format: entity1@synonym1|synonym2,entity2@synonym1|synonym2. Example: pikachu@25|pika,charmander@3\n  -h, --help                 help for create\n  -e, --locale string        Optional. Locale of the intent. Default: agent locale\n  -l, --location-id string   Dialogflow CX Location ID of the Project\n  -p, --project-id string    Dialogflow CX Project ID\n</code></pre>"},{"location":"cmd/cxcli_entity-type_create/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_entity-type_create/#see-also","title":"See also","text":"<ul> <li>cxcli entity-type   - Actions on entity type commands</li> </ul>"},{"location":"cmd/cxcli_entity-type_delete/","title":"cxcli entity-type delete","text":"<p>Deletes an entity type in an agent</p> <pre><code>cxcli entity-type delete [entity-type-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_entity-type_delete/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name\n  -f, --force                Optional. Forces to delete the Entity type. NOTE: it will delete all any references to the entity type\n  -h, --help                 help for delete\n  -l, --location-id string   Dialogflow CX Location ID of the Project\n  -p, --project-id string    Dialogflow CX Project ID\n</code></pre>"},{"location":"cmd/cxcli_entity-type_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_entity-type_delete/#see-also","title":"See also","text":"<ul> <li>cxcli entity-type   - Actions on entity type commands</li> </ul>"},{"location":"cmd/cxcli_environment/","title":"cxcli environment","text":"<p>Actions on environment</p> <pre><code>cxcli environment [flags]\n</code></pre>"},{"location":"cmd/cxcli_environment/#options","title":"Options","text":"<pre><code>  -h, --help   help for environment\n</code></pre>"},{"location":"cmd/cxcli_environment/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_environment/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli environment execute-cicd     - Executes a CICD pipeline for a specific environment</li> </ul>"},{"location":"cmd/cxcli_environment_execute-cicd/","title":"cxcli environment execute-cicd","text":"<p>Executes a CICD pipeline for a specific environment</p> <pre><code>cxcli environment execute-cicd [environment] [flags]\n</code></pre>"},{"location":"cmd/cxcli_environment_execute-cicd/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name\n  -h, --help                 help for execute-cicd\n  -l, --location-id string   Dialogflow CX Location ID of the Project\n  -p, --project-id string    Dialogflow CX Project ID\n</code></pre>"},{"location":"cmd/cxcli_environment_execute-cicd/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_environment_execute-cicd/#see-also","title":"See also","text":"<ul> <li>cxcli environment   - Actions on environment</li> </ul>"},{"location":"cmd/cxcli_intent/","title":"cxcli intent","text":"<p>Actions on intent commands</p> <pre><code>cxcli intent [flags]\n</code></pre>"},{"location":"cmd/cxcli_intent/#options","title":"Options","text":"<pre><code>  -h, --help   help for intent\n</code></pre>"},{"location":"cmd/cxcli_intent/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_intent/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli intent create   - Creates an intent in an agent</li> <li>cxcli intent delete   - Deletes an intent in an agent</li> </ul>"},{"location":"cmd/cxcli_intent_create/","title":"cxcli intent create","text":"<p>Creates an intent in an agent</p> <pre><code>cxcli intent create [intent-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_intent_create/#options","title":"Options","text":"<pre><code>  -a, --agent-name string          Dialogflow CX Agent Name\n  -h, --help                       help for create\n  -e, --locale string              Optional. Locale of the intent. Default: agent locale\n  -l, --location-id string         Dialogflow CX Location ID of the Project\n  -p, --project-id string          Dialogflow CX Project ID\n  -t, --training-phrases strings   List of the training phrases for this intent, comma separated. Entities, add @entity-type to the word: word@entity-type in the training phrase. Example: hello,hi how are you today@sys.date,morning!\n</code></pre>"},{"location":"cmd/cxcli_intent_create/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_intent_create/#see-also","title":"See also","text":"<ul> <li>cxcli intent     - Actions on intent commands</li> </ul>"},{"location":"cmd/cxcli_intent_delete/","title":"cxcli intent delete","text":"<p>Deletes an intent in an agent</p> <pre><code>cxcli intent delete [intent-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_intent_delete/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name\n  -h, --help                 help for delete\n  -l, --location-id string   Dialogflow CX Location ID of the Project\n  -p, --project-id string    Dialogflow CX Project ID\n</code></pre>"},{"location":"cmd/cxcli_intent_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_intent_delete/#see-also","title":"See also","text":"<ul> <li>cxcli intent     - Actions on intent commands</li> </ul>"},{"location":"cmd/cxcli_jsonschema/","title":"cxcli jsonschema","text":"<p>outputs cxcli's JSON schema</p> <pre><code>cxcli jsonschema [flags]\n</code></pre>"},{"location":"cmd/cxcli_jsonschema/#options","title":"Options","text":"<pre><code>  -h, --help                   help for jsonschema\n  -f, --output-folder string   Where to save the JSONSchema file (default \"-\")\n</code></pre>"},{"location":"cmd/cxcli_jsonschema/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_jsonschema/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> </ul>"},{"location":"cmd/cxcli_profile-nlu/","title":"cxcli profile-nlu","text":"<p>Actions on testing</p> <pre><code>cxcli profile-nlu [flags]\n</code></pre>"},{"location":"cmd/cxcli_profile-nlu/#options","title":"Options","text":"<pre><code>  -h, --help   help for profile-nlu\n</code></pre>"},{"location":"cmd/cxcli_profile-nlu/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_profile-nlu/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli profile-nlu execute   - Execute a suite</li> </ul>"},{"location":"cmd/cxcli_profile-nlu_execute/","title":"cxcli profile-nlu execute","text":"<p>Execute a suite</p> <pre><code>cxcli profile-nlu execute [suite-file] [flags]\n</code></pre>"},{"location":"cmd/cxcli_profile-nlu_execute/#options","title":"Options","text":"<pre><code>  -h, --help   help for execute\n</code></pre>"},{"location":"cmd/cxcli_profile-nlu_execute/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_profile-nlu_execute/#see-also","title":"See also","text":"<ul> <li>cxcli profile-nlu   - Actions on testing</li> </ul>"},{"location":"cmd/cxcli_stt/","title":"cxcli stt","text":"<p>Actions on speech-to-text commands</p> <pre><code>cxcli stt [flags]\n</code></pre>"},{"location":"cmd/cxcli_stt/#options","title":"Options","text":"<pre><code>  -h, --help   help for stt\n</code></pre>"},{"location":"cmd/cxcli_stt/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_stt/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli stt recognize   - Transforms audio into text</li> </ul>"},{"location":"cmd/cxcli_stt_recognize/","title":"cxcli stt recognize","text":"<p>Transforms audio into text</p> <pre><code>cxcli stt recognize [input] [flags]\n</code></pre>"},{"location":"cmd/cxcli_stt_recognize/#options","title":"Options","text":"<pre><code>  -h, --help            help for recognize\n  -l, --locale string   Input locale\n</code></pre>"},{"location":"cmd/cxcli_stt_recognize/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_stt_recognize/#see-also","title":"See also","text":"<ul> <li>cxcli stt   - Actions on speech-to-text commands</li> </ul>"},{"location":"cmd/cxcli_tts/","title":"cxcli tts","text":"<p>Actions on text-to-speech commands</p> <pre><code>cxcli tts [flags]\n</code></pre>"},{"location":"cmd/cxcli_tts/#options","title":"Options","text":"<pre><code>  -h, --help   help for tts\n</code></pre>"},{"location":"cmd/cxcli_tts/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_tts/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli tts synthesize     - Transforms text into audio</li> </ul>"},{"location":"cmd/cxcli_tts_synthesize/","title":"cxcli tts synthesize","text":"<p>Transforms text into audio</p> <pre><code>cxcli tts synthesize [input] [flags]\n</code></pre>"},{"location":"cmd/cxcli_tts_synthesize/#options","title":"Options","text":"<pre><code>  -h, --help                 help for synthesize\n  -l, --locale string        Input locale\n  -f, --output-file string   Output file name (default \"output.mp3\")\n</code></pre>"},{"location":"cmd/cxcli_tts_synthesize/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_tts_synthesize/#see-also","title":"See also","text":"<ul> <li>cxcli tts   - Actions on text-to-speech commands</li> </ul>"},{"location":"cmd/cxcli_version/","title":"cxcli version","text":"<p>Get cxcli version</p> <pre><code>cxcli version [flags]\n</code></pre>"},{"location":"cmd/cxcli_version/#options","title":"Options","text":"<pre><code>  -h, --help   help for version\n</code></pre>"},{"location":"cmd/cxcli_version/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file\n  -o, --output-format string   Output Format (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command\n  -v, --verbose                verbose error output (with stack trace)\n</code></pre>"},{"location":"cmd/cxcli_version/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> </ul>"},{"location":"community/contributing/","title":"Contributing","text":"<p>By participating in this project, you agree to abide our code of conduct.</p>"},{"location":"community/contributing/#set-up-your-machine","title":"Set up your machine","text":"<p><code>cxcli</code> is written in Go.</p> <p>Prerequisites:</p> <ul> <li>Go 1.19+</li> </ul> <p>Other things you might need to run the tests:</p> <ul> <li>cosign</li> <li>Docker</li> <li>Podman</li> <li>Snapcraft</li> <li>Syft</li> </ul> <p>Clone <code>cxcli</code> anywhere:</p> <pre><code>git clone git@github.com:xavidop/dialogflow-cx-cli.git\n</code></pre> <p><code>cd</code> into the directory and install the dependencies:</p> <pre><code>go mod tidy\n</code></pre> <p>A good way of making sure everything is all right is running the build:</p> <pre><code>go build -o cxcli .\n</code></pre>"},{"location":"community/contributing/#test-your-change","title":"Test your change","text":"<p>You can create a branch for your changes and try to build from the source as you go:</p> <pre><code>go build -o cxcli .\n</code></pre>"},{"location":"community/contributing/#create-a-commit","title":"Create a commit","text":"<p>Commit messages should be well formatted, and to make that \"standardized\", we are using Conventional Commits.</p> <p>You can follow the documentation on their website.</p>"},{"location":"community/contributing/#submit-a-pull-request","title":"Submit a pull request","text":"<p>Push your branch to your <code>cxcli</code> fork and open a pull request against the main branch.</p>"},{"location":"community/contributing/#financial-contributions","title":"Financial contributions","text":"<p>You can contribute in our Github Sponsors or to any of the contributors directly. See this page for more details.</p>"},{"location":"community/sponsors/","title":"Sponsors","text":"<p>Do you or your company use cxcli? You can help keep the project bug-free and feature rich by sponsoring the project and its maintainers.</p>"},{"location":"community/sponsors/#github-sponsors","title":"GitHub Sponsors","text":"<p>GitHub Sponsors is a great way to contribute directly to the main maintainer, xavidop.</p> <p>This money usually goes to buying coffee, beer, better hardware, and, hopefully, one day, paying the bills.</p>  <p>You can sponsor and see who's sponsoring Xavier Portilla Edo here.</p>  <p>\u2728\u2728 Thanks for your support! \u2728\u2728</p>"},{"location":"community/users/","title":"Users","text":""},{"location":"community/users/#who-uses-cxcli","title":"Who uses cxcli?","text":"<p>As the cxcli Community grows, we'd like to keep a list of our users.</p> <p>Here's a running list of some organizations using cxcli1:</p> <ol> <li>Empty list, become the first one!</li> </ol> <p>Feel free to add yours!</p>    <ol> <li> <p>Entries were either added by the companies themselves or by the maintainers after seeing it in the wild.\u00a0\u21a9</p> </li> </ol>"},{"location":"entitytypes/create/","title":"Create","text":""},{"location":"entitytypes/create/#usage","title":"Usage","text":"<p>You can find the create command usage down the <code>cxcli entity-type create</code> command. You can read the documentation about this command here.</p> <p>The <code>--entities</code> is a list of the entities with its synonyms, comma separated. This parameter has the following format:  <pre><code>entity1@synonym1|synonym2,entity2@synonym1|synonym2\n</code></pre></p> <p>Here you have an example: <code>pikachu@25|pika,charmander@3</code></p>"},{"location":"entitytypes/create/#example","title":"Example","text":"<p>This a simple example of the <code>cxcli entity-type create</code> command:</p> <pre><code>cxcli entity-type create pokemon --entities \"pikachu@25|pika,charmander@3\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The command above will give you an output like this one:</p> <pre><code>$ cxcli entity-type create pokemon --entities \"pikachu@25|pika,charmander@3\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Entity Type created with id: projects/test-cx-346408/locations/us-central1/agents/40278ea0-c0fc-4d9a-a4d4-caa68d86295f/entityTypes/457a451d-f5ce-47da-b8dc-16b17d874a5d \n</code></pre>"},{"location":"entitytypes/create/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX Entity types creation, check the official documentation.</p>"},{"location":"entitytypes/delete/","title":"Delete","text":""},{"location":"entitytypes/delete/#usage","title":"Usage","text":"<p>You can find the delete command usage down the <code>cxcli entity-type delete</code> command. You can read the documentation about this command here.</p>"},{"location":"entitytypes/delete/#example","title":"Example","text":"<p>This a simple example of the <code>cxcli entity-type delete</code> command:</p> <pre><code>cxcli entity-type delete pokemon2  --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The command above will give you an output like this one:</p> <pre><code>$ cxcli entity-type delete pokemon2  --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Entity Type deleted                          \n</code></pre>"},{"location":"entitytypes/delete/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX entity types deletion, check the official documentation.</p>"},{"location":"entitytypes/introduction/","title":"Entity types","text":""},{"location":"entitytypes/introduction/#what-is-this","title":"What is this?","text":"<p>With the <code>cxcli</code> you can interact easily with your Dialogflow CX entity types.</p> <p>All the commands that you have available in the <code>cxcli</code> to interact with your agents are located down the <code>cxcli entity-type</code> command.</p>"},{"location":"entitytypes/introduction/#create","title":"Create","text":"<p>The <code>cxcli</code> has a command that allows you to create an entity type. You can find the whole explanation here</p>"},{"location":"entitytypes/introduction/#delete","title":"Delete","text":"<p>The <code>cxcli</code> has a command that allows you to delete your entity type. You can find the whole explanation here</p>"},{"location":"entitytypes/introduction/#useful-links","title":"Useful Links","text":"<p>If you want to check the full usage of the <code>cxcli entity-type</code> command, please refer to this page.</p> <p>If you want to learn more about Dialogflow CX entity types, check the official documentation.</p>"},{"location":"environments/cicd/","title":"Environments CICD","text":""},{"location":"environments/cicd/#usage","title":"Usage","text":"<p>You can find the cicd command usage down the <code>cxcli environment execute-cicd</code> command. You can read the documentation about this command here.</p>"},{"location":"environments/cicd/#example","title":"Example","text":"<p>This a simple example of the <code>cxcli environment execute-cicd</code> command:</p> <pre><code>cxcli environment execute-cicd cicd-env --project-id test-cx-346408 --location-id us-central1 --agent-name test-agent\n</code></pre> <p>The command above will give you an output like this one:</p> <pre><code>$ cxcli environment execute-cicd cicd-env --project-id test-cx-346408 --location-id us-central1 --agent-name test-agent\nINFO Executing cicd for environment cicd-env      \nINFO PASSED                     \n</code></pre>  <p>are you running this command in a CICD pipeline?</p> <p>If this is the case, we recommend you to execute with the <code>--output-format</code> parameter set to <code>json</code>.</p>"},{"location":"environments/cicd/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX cicd executions, check the official documentation.</p>"},{"location":"environments/introduction/","title":"Environments","text":""},{"location":"environments/introduction/#what-is-this","title":"What is this?","text":"<p>In software, it is a common pattern (and a best practice) to have different environments where developers can deploy different versions of their software. Each environment has its own configurations.</p> <p>In Dialogflow CX we have the same concept, you can create a version of your agent and then, deploy it to an environment. Same with the webhook, you can deploy a webhook version and use that version in an environment.</p> <p>With the <code>cxcli</code> you can interact easily with the environments of your Dialogflow CX agents.</p> <p>All the commands that you have available in the <code>cxcli</code> to interact with your environments are located down the <code>cxcli environment</code> command.</p>"},{"location":"environments/introduction/#cicd","title":"CICD","text":"<p>In Dialogflow CX, while you are testing your agents, you can save those tests and associate them to a specific environment.</p> <p>The <code>cxcli</code> has a command that allows you to run these cicd pipelines from your terminal or from your CI processes. You can find the whole explanation here</p>"},{"location":"environments/introduction/#useful-links","title":"Useful Links","text":"<p>If you want to check the full usage of the <code>cxcli environment</code> command, please refer to this page.</p> <p>If you want to learn more about Dialogflow CX environments, check the official documentation.</p>"},{"location":"intents/create/","title":"Create","text":""},{"location":"intents/create/#usage","title":"Usage","text":"<p>You can find the create command usage down the <code>cxcli intent create</code> command. You can read the documentation about this command here.</p> <p>The <code>--training-phrases</code> parameter is a list of the training phrases for this intent, comma separated. For the entities used in this intent, add <code>@entity-type</code> to the word in the training phrase. This is the format: </p> <pre><code>word@entity-type\n</code></pre> <p>Here you have an example: <code>hello, hi how are you today@sys.date, morning!</code></p>"},{"location":"intents/create/#example","title":"Example","text":"<p>This a simple example of the <code>cxcli intent create</code> command:</p> <pre><code>cxcli intent create test_intent --training-phrases \"hello, hi how are you today@sys.date, morning\"  --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The command above will give you an output like this one:</p> <pre><code>$ cxcli intent create test_intent --training-phrases \"hello, hi how are you today@sys.date, morning\"  --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Intent created with id: projects/test-cx-346408/locations/us-central1/agents/40278ea0-c0fc-4d9a-a4d4-caa68d86295f/intents/a7870357-e942-43dd-99d2-4de8c81a3c09 \n</code></pre>"},{"location":"intents/create/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX Intent creation, check the official documentation.</p>"},{"location":"intents/delete/","title":"Delete","text":""},{"location":"intents/delete/#usage","title":"Usage","text":"<p>You can find the delete command usage down the <code>cxcli intent delete</code> command. You can read the documentation about this command here.</p>"},{"location":"intents/delete/#example","title":"Example","text":"<p>This a simple example of the <code>cxcli intent delete</code> command:</p> <pre><code>cxcli intent delete test_intent --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The command above will give you an output like this one:</p> <pre><code>$ cxcli intent delete test_intent --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Intent deleted                     \n</code></pre>"},{"location":"intents/delete/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX Intent creation, check the official documentation.</p>"},{"location":"intents/introduction/","title":"Intent","text":""},{"location":"intents/introduction/#what-is-this","title":"What is this?","text":"<p>With the <code>cxcli</code> you can interact easily with your Dialogflow CX intents.</p> <p>All the commands that you have available in the <code>cxcli</code> to interact with your agents are located down the <code>cxcli intents</code> command.</p>"},{"location":"intents/introduction/#create","title":"Create","text":"<p>The <code>cxcli</code> has a command that allows you to create an intents. You can find the whole explanation here</p>"},{"location":"intents/introduction/#delete","title":"Delete","text":"<p>The <code>cxcli</code> has a command that allows you to delete your intents. You can find the whole explanation here</p>"},{"location":"intents/introduction/#useful-links","title":"Useful Links","text":"<p>If you want to check the full usage of the <code>cxcli intents</code> command, please refer to this page.</p> <p>If you want to learn more about Dialogflow CX intents, check the official documentation.</p>"},{"location":"nluprofiler/examples/","title":"Examples","text":""},{"location":"nluprofiler/examples/#simple","title":"Simple","text":"<p>Simple example that demonstrates the NLU Profiler in action. Find it here</p>"},{"location":"nluprofiler/examples/#system-entity-detection","title":"System entity detection","text":"<p>Example that shows how to validate Dialogflow CX built-in entities. Find it here</p>"},{"location":"nluprofiler/examples/#text-input-with-entities","title":"Text input with entities","text":"<p>Full example with multiple user-defined entities and Dialogflow CX built-in entities. Find it here</p>"},{"location":"nluprofiler/examples/#audio-input","title":"Audio input","text":"<p>Example using an audio file as an input. Find it here</p>"},{"location":"nluprofiler/introduction/","title":"NLU profiler","text":""},{"location":"nluprofiler/introduction/#what-is-this","title":"What is this?","text":"<p>  </p> <p>Use the NLU Profiler to test user utterances and improve your agent's interaction model.</p> <p>With the NLU Profiler, you can see how utterances resolve to intents and slots in your interaction model. When an utterance doesn't resolve to the right intent or slot, you can update the interaction model and try again. With the <code>cxcli</code>, you can see what intents Dialogflow CX considered and discarded. Then, you can determine how to use additional samples to train your model to resolve utterances to their intended intents and slots.</p> <p>Every suite is executed in the Dialogflow CX session so you can test not only your NLU but also a conversation itself.</p> <p>All the commands that you have available in the <code>cxcli</code> to execute the NLU profiler are located down the <code>cxcli profile-nlu</code> command.</p>"},{"location":"nluprofiler/introduction/#reference","title":"Reference","text":"<p>It is important to know which suites and tests you can build. Because of that, you can find the entire reference in the Reference page. Suites and test are defined as <code>yaml</code> files.</p> <p>The <code>cxcli</code> has a command that allows you to run these suites from your terminal or from your CI pipelines.</p> <p>To execute a suite, you have to run the <code>cxcli profile-nlu execute</code> command. For the usage, please refer to this page.</p> <p>You can also generate it for your specific version using the <code>cxcli jsonschema</code> command.</p>"},{"location":"nluprofiler/introduction/#examples","title":"Examples","text":"<p>You can find some useful examples on our Github repo and the Examples page.</p>"},{"location":"nluprofiler/introduction/#execution-example","title":"Execution Example","text":"<p>This a simple example of the <code>cxcli profile-nlu execute</code> command:</p> <pre><code>cxcli profile-nlu execute examples/suite.yaml\n</code></pre> <p>The command above will give you an output similar this one:</p> <pre><code>$ cxcli profile-nlu execute suite.yaml\nINFO Suite Information: test-agent                \nINFO Test ID: test_1                              \nINFO Input: type: text, value: hi                 \nINFO Intent Detected: hi_intent                   \nINFO Input: type: text, value: hello              \nINFO Intent Detected: hi_intent                   \nINFO Input: type: audio, value: ./audio/hi.mp3    \nINFO Intent Detected: hi_intent                   \nINFO Test ID: test_2                              \nINFO Input: type: text, value: I want 3 pizzas    \nINFO Intent Detected: order_intent                \nINFO Param order_type: pizza                      \nINFO Param number: 3                              \nINFO Input: type: text, value: I want 2 cokes     \nINFO Intent Detected: order_intent                \nINFO Param number: 2                              \nINFO Param order_type: coke                        \n</code></pre>  <p>are you running this command in a CICD pipeline?</p> <p>If this is the case, we recommend you to execute with the <code>--output-format</code> parameter set to <code>json</code>.</p>"},{"location":"nluprofiler/suites/","title":"Suites","text":""},{"location":"nluprofiler/suites/#reference","title":"Reference","text":"<p>A suite is a yaml file with the following structure:</p> <pre><code># suite.yaml\n\n# Name of the suite.\nname: Example Suite\n# Brief description of the suite.\ndescription: Suite used as an example\n# Project ID on Google Cloud where is located your Dialogflow CX agent.\nprojectId: test-cx-346408\n# Location where your Dialogflow CX agent is running. \n# More info here: https://cloud.google.com/dialogflow/cx/docs/concept/region\nlocationId: us-central1\n# Agent name of your Dialogflow CX agent.\n# Notice: it is the agent name, not the agent ID.\nagentName: test-agent\n# You can have multiple tests defined in separated files\ntests:\n  # ID of the test.\n  - id: test_id\n    # File where the test specification is located\n    file: ./test.yaml\n</code></pre>"},{"location":"nluprofiler/suites/#json-schema","title":"JSON Schema","text":"<p><code>cxcli</code> also has a jsonschema file, which you can use to have better editor support:</p> <pre><code>https://cxcli.xavidop.me/static/suite.json\n</code></pre> <p>You can also specify it in your <code>yml</code> config files by adding a comment like the following: <pre><code># yaml-language-server: $schema=https://cxcli.xavidop.me/static/suite.json\n</code></pre></p>"},{"location":"nluprofiler/tests/","title":"Tests","text":""},{"location":"nluprofiler/tests/#reference","title":"Reference","text":"<p>A test is a yaml file with the following structure:</p> <pre><code># test.yaml\n\n# Name of the test.\nname: Example test\n# Brief description of the test.\ndescription: These are some tests\n# Locale of the interaction model that is gonna be tested. \n# You can find the locales here: https://cloud.google.com/dialogflow/cx/docs/reference/language\nlocaleId: en\n# A check is the test itself: given an input, you will validate the intents and the parameters/entities detected by Dialogflow CX\n# You can have multiple checks defined\nchecks:\n  # The ID of the check\n  - id: test\n    input:\n      # the input type\n      # it could be text or audio\n      type: text\n      # The input itself in text format. For type: audio, you have to specify the audio tag.\n      text: I want 3 pizzas\n    validate:\n      # Intent that is supposed to be detected\n      intent: order_intent\n      # You can have multiple parameters/intents\n      # Notice: this could be empty if your intent does not have any entities/parameters.\n      parameters:\n        # Entity name that is supposed to be detected\n        - parameter: number\n          # Value that is supposed to be detected\n          value: 3\n</code></pre>"},{"location":"nluprofiler/tests/#audio-input","title":"Audio input","text":"<p>It is important to know that the input has to have this format:</p> <ol> <li>A Sample Rate Hertz of 16000Hz</li> <li>The audio encoding has to be be Linear16. Linear16 is a 16-bit linear pulse-code modulation (PCM) encoding.</li> </ol> <p>If you don't have a file with this format, you can create it by yourself using the <code>cxcli tts</code> command! All the information is located here</p>"},{"location":"nluprofiler/tests/#json-schema","title":"JSON Schema","text":"<p><code>cxcli</code> also has a jsonschema file, which you can use to have better editor support:</p> <pre><code>https://cxcli.xavidop.me/static/test.json\n</code></pre> <p>You can also specify it in your <code>yml</code> config files by adding a comment like the following: <pre><code># yaml-language-server: $schema=https://cxcli.xavidop.me/static/test.json\n</code></pre></p>"},{"location":"nluprofiler/examples/audio/","title":"Audio input","text":""},{"location":"nluprofiler/examples/audio/#suite-file","title":"Suite file","text":"<pre><code># suite.yaml\n\nname: Example Suite\ndescription: Suite used as an example\nprojectId: test-cx-346408\nlocationId: us-central1\nagentName: test-agent\ntests:\n  - id: test_id\n    file: ./test.yaml\n</code></pre>"},{"location":"nluprofiler/examples/audio/#test-file","title":"Test file","text":"<pre><code># test.yaml\n\nname: Example test\ndescription: These are some tests\nlocaleId: en\nchecks:\n  - id: my_check\n    input: \n      type: audio\n      audio: ./audio/hi.mp3\n    validate:\n      intent: hi_intent\n</code></pre> <p>You can download the audio file used in this example here</p>"},{"location":"nluprofiler/examples/simple/","title":"Simple example","text":""},{"location":"nluprofiler/examples/simple/#suite-file","title":"Suite file","text":"<pre><code># suite.yaml\n\nname: Example Suite\ndescription: Suite used as an example\nprojectId: test-cx-346408\nlocationId: us-central1\nagentName: test-agent\ntests:\n  - id: test_id\n    file: ./test.yaml\n</code></pre>"},{"location":"nluprofiler/examples/simple/#test-file","title":"Test file","text":"<pre><code># test.yaml\n\nname: Example test\ndescription: These are some tests\nlocaleId: en\nchecks:\n  - id: my_first_check\n    input: \n      type: text\n      text: hi\n    validate:\n      intent: hi_intent\n\n  - id: my_second_check\n    input: \n      type: text\n      text: hello\n    validate:\n      intent: hi_intent\n</code></pre>"},{"location":"nluprofiler/examples/system/","title":"System entity detection example","text":""},{"location":"nluprofiler/examples/system/#suite-file","title":"Suite file","text":"<pre><code># suite.yaml\n\nname: Example Suite\ndescription: Suite used as an example\nprojectId: test-cx-346408\nlocationId: us-central1\nagentName: test-agent\ntests:\n  - id: test_id\n    file: ./test.yaml\n</code></pre>"},{"location":"nluprofiler/examples/system/#test-file","title":"Test file","text":"<pre><code># test.yaml\n\nname: Example test\ndescription: These are some tests\nlocaleId: en\nchecks:\n  - id: my_check\n    input: \n      type: text\n      text: please, give me 3\n    validate:\n      intent: finish_order_intent\n      parameters:\n        - parameter: number\n          value: 3\n</code></pre>"},{"location":"nluprofiler/examples/text/","title":"Text input with parameters example","text":""},{"location":"nluprofiler/examples/text/#suite-file","title":"Suite file","text":"<pre><code># suite.yaml\n\nname: Example Suite\ndescription: Suite used as an example\nprojectId: test-cx-346408\nlocationId: us-central1\nagentName: test-agent\ntests:\n  - id: test_id\n    file: ./test.yaml\n</code></pre>"},{"location":"nluprofiler/examples/text/#test-file","title":"Test file","text":"<pre><code># test.yaml\n\nname: Example test\ndescription: These are some tests\nlocaleId: en\nchecks:\n  - id: my_first_check\n    input: \n      type: text\n      text: I want 3 pizzas\n    validate:\n      intent: order_intent\n      parameters:\n        - parameter: number\n          value: 3\n        - parameter: order_type\n          value: pizza\n\n  - id: my_second_check\n    input: \n      type: text\n      text: I want 2 cokes\n    validate:\n      intent: order_intent\n      parameters:\n        - parameter: number\n          value: 2\n        - parameter: order_type\n          value: coke\n</code></pre>"},{"location":"overview/authentication/","title":"Authentication","text":"<p><code>cxcli</code> uses some Google cloud APIs. By default the tool uses the default configuration that uses the <code>gcloud</code> cli. If you want to use another authentication key you can provide a <code>json</code> file with the global <code>--credentials</code> parameter.</p> <p>The <code>cxcli</code> source code is open source, you can check it out here to learn more about the actions the tool performs.</p> <p>Below you can find the roles and the APIs needed to use the tool.</p>"},{"location":"overview/authentication/#roles-needed","title":"Roles needed","text":""},{"location":"overview/authentication/#dialogflow-cx","title":"Dialogflow CX","text":"<p>Dialogflow API Admin: Provides full access to create, update, query, detect intent, and delete the agent from the console or API. Click here for more information.</p> <p>We are using the Admin role because <code>cxcli</code> performs the List agent action.</p> <p>This role allows you to execute Speech-to-text and Text-to-speech actions</p>"},{"location":"overview/authentication/#apis-enabled-needed","title":"APIs enabled needed","text":"<p>These APIs should be enabled on your Google Cloud project if you want to use these <code>cxcli</code> capabilities:</p>"},{"location":"overview/authentication/#dialogflow-cx_1","title":"Dialogflow CX","text":"<p>You will need to enable the <code>Dialogflow API</code> on your project. More information here</p>"},{"location":"overview/authentication/#speech-to-text","title":"Speech-to-text","text":"<p>You will need to enable the <code>Cloud Speech-to-Text API</code> on your project. More information here</p>"},{"location":"overview/authentication/#text-to-speech","title":"Text-to-speech","text":"<p>You will need to enable the <code>Cloud Text-to-Speech API</code> on your project. More information here</p>"},{"location":"overview/faq/","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"overview/faq/#how-does-it-work","title":"How does it work?","text":"<p><code>cxcli</code> has three main purposes:</p> <ol> <li>Make the interaction with you Dialogflow CX projects from you laptops or your continuous integration pipelines easier than ever</li> <li>Create testing tools that will help users to build their dialogflow CX agent</li> <li>Interact with other Google Cloud APIs such as TTS and STT ones in a super easy way</li> </ol>"},{"location":"overview/faq/#who-is-cxcli-for","title":"Who is <code>cxcli</code> for?","text":"<p><code>cxcli</code> is primarily for software engineering teams who are currently using Dialogflow CX. It is recommended for Machine learning engineers that usually work with STT, TTS, NLU and NLP technologies.</p>"},{"location":"overview/faq/#what-kind-of-machinescontainers-do-i-need-for-the-cxcli","title":"What kind of machines/containers do I need for the <code>cxcli</code>?","text":"<p>You'll need either: a bare-metal host (your own, AWS i3.metal or Equinix Metal), a VM that supports nested virtualisation such as those provided by GCP, Azure, AWS DigitalOcean, etc or a linux or windows container.</p>"},{"location":"overview/faq/#when-will-jenkins-gitlab-ci-bitbucket-pipeline-runners-drone-or-azure-devops-be-supported","title":"When will Jenkins, GitLab CI, BitBucket Pipeline Runners, Drone or Azure DevOps be supported?","text":"<p>For the current phase, we're targeting GitHub Actions because it has fine-grained access controls and the ability to schedule exactly one build to a runner. The other CI systems will be available soon.</p> <p>That said, if you're using these tools within your organisation, we'd like to hear from you.  So feel free to reach out to us if you feel <code>cxcli</code> would be a good fit for your team.</p> <p>Feel free to contact us at: dialogflowcxcli@gmail.com</p>"},{"location":"overview/faq/#what-kind-of-access-is-required-to-my-google-cloud-project","title":"What kind of access is required to my Google Cloud project?","text":"<p>Check the Authentication page here</p>"},{"location":"overview/faq/#can-cxcli-be-used-on-public-repos","title":"Can cxcli be used on public repos?","text":"<p>Yes, <code>cxcli</code> can be used on public and private repos.</p>"},{"location":"overview/faq/#whats-in-the-container-image-and-how-is-it-built","title":"What's in the Container image and how is it built?","text":"<p>The Container image contains uses <code>alpine:latest</code> and the <code>cxcli</code> installed on it.</p> <p>The image is built automatically using GitHub Actions and is available on a container registry.</p>"},{"location":"overview/faq/#is-arm64-supported","title":"Is ARM64 supported?","text":"<p>Yes, <code>cxcli</code> is built to run on both Intel/AMD and ARM64 hosts. This includes a Raspberry Pi 4B, AWS Graviton, Oracle Cloud ARM instances and potentially any other ARM64 instances which support virtualisation.</p>"},{"location":"overview/faq/#are-windows-or-macos-supported","title":"Are Windows or MacOS supported?","text":"<p>Yes, not only Linux, but also Windows and MacOS are supported platforms for <code>cxcli</code> at this time on a AMD64 or ARM64 architecture.</p>"},{"location":"overview/faq/#is-cxcli-free-and-open-source","title":"Is <code>cxcli</code> free and open-source?","text":"<p><code>cxcli</code> is an open source tool, however, it interacts with Google Cloud APIs so a GCP account is required.</p> <p>The website and documentation are available on GitHub and we plan to release some open source tools in the future for cxcli customers. </p>"},{"location":"overview/faq/#is-there-a-risk-that-we-could-get-locked-in-to-cxcli","title":"Is there a risk that we could get \"locked-in\" to <code>cxcli</code>?","text":"<p>No, you can move back to either <code>gcloud</code> cli or using the APIs itself at any time. Bear in mind that <code>cxcli</code> not only solves for a certain set of issues with both of those approaches but also simplifies the interaction with Google Cloud.</p>"},{"location":"overview/faq/#why-is-the-brand-called-cxcli-and-dialogflow-cx-cli","title":"Why is the brand called \"cxcli\" and \"Dialogflow CX CLI\" ?","text":"<p>The name of the software is <code>cxcli</code>, in some places \"cxcli\" is not available, and we liked \"Dialogflow CX CLI\" because it refers to the what the tool does.</p>"},{"location":"overview/install/","title":"Install","text":"<p>You can install the pre-compiled binary (in several ways), using Docker or compiling it from source.</p> <p>Below you can find the steps for each of them.</p>"},{"location":"overview/install/#install-the-pre-compiled-binary","title":"Install the pre-compiled binary","text":""},{"location":"overview/install/#homebrew-tap","title":"homebrew tap","text":"<ol> <li>Add the Hombrew tab: <pre><code>brew tap xavidop/tap git@github.com:xavidop/homebrew-tap.git\nbrew update\n</code></pre></li> <li>Install the Dialogflow CX CLI: <pre><code>brew install cxcli\n</code></pre></li> </ol>"},{"location":"overview/install/#snapcraft","title":"snapcraft","text":"<pre><code>sudo snap install cxcli\n</code></pre>"},{"location":"overview/install/#scoop","title":"scoop","text":"<pre><code>scoop bucket add cxcli https://github.com/xavidop/scoop-bucket.git\nscoop install cxcli\n</code></pre>"},{"location":"overview/install/#chocolatey","title":"chocolatey","text":"<pre><code>choco install cxcli\n</code></pre>"},{"location":"overview/install/#apt","title":"apt","text":"<pre><code>echo 'deb [trusted=yes] https://apt.fury.io/xavidop/ /' | sudo tee /etc/apt/sources.list.d/cxcli.list\nsudo apt update\nsudo apt install cxcli\n</code></pre>"},{"location":"overview/install/#yum","title":"yum","text":"<pre><code>echo '[cxcli]\nname=Dialogflow CX CLI Repo\nbaseurl=https://yum.fury.io/xavidop/\nenabled=1\ngpgcheck=0' | sudo tee /etc/yum.repos.d/cxcli.repo\nsudo yum install cxcli\n</code></pre>"},{"location":"overview/install/#aur","title":"aur","text":"<pre><code>yay -S cxcli-bin\n</code></pre>"},{"location":"overview/install/#deb-rpm-and-apk-packages","title":"deb, rpm and apk packages","text":"<p>Download the <code>.deb</code>, <code>.rpm</code> or <code>.apk</code> packages from the OSS releases page and install them with the appropriate tools.</p>"},{"location":"overview/install/#go-install","title":"go install","text":"<pre><code>go install github.com/xavidop/dialogflow-cx-cli@latest\n</code></pre>"},{"location":"overview/install/#bash-script","title":"bash script","text":"<pre><code>curl -sfL https://cxcli.xavidop.me/static/run | bash\n</code></pre>"},{"location":"overview/install/#additional-options","title":"Additional Options","text":"<p>You can also set the <code>VERSION</code> variable to specify a version instead of using latest.</p> <p>You can also pass flags and args to cxcli:</p> <pre><code>curl -sfL https://cxcli.xavidop.me/static/run |\n    VERSION=__VERSION__ bash -s -- version\n</code></pre>  <p>Tip</p> <p>This script does not install anything, it just downloads, verifies and runs cxcli. Its purpose is to be used within scripts and CIs.</p>"},{"location":"overview/install/#manually","title":"manually","text":"<p>Download the pre-compiled binaries from the releases page and copy them to the desired location.</p>"},{"location":"overview/install/#verifying-the-artifacts","title":"Verifying the artifacts","text":""},{"location":"overview/install/#binaries","title":"binaries","text":"<p>All artifacts are checksummed, and the checksum file is signed with cosign.</p> <ol> <li>Download the files you want, and the <code>checksums.txt</code>, <code>checksum.txt.pem</code> and <code>checksums.txt.sig</code> files from the releases page:     <pre><code>wget https://github.com/xavidop/dialogflow-cx-cli/releases/download/__VERSION__/checksums.txt\nwget https://github.com/xavidop/dialogflow-cx-cli/releases/download/__VERSION__/checksums.txt.sig\nwget https://github.com/xavidop/dialogflow-cx-cli/releases/download/__VERSION__/checksums.txt.pem\n</code></pre></li> <li>Verify the signature:     <pre><code>COSIGN_EXPERIMENTAL=1 cosign verify-blob \\\n--cert checksums.txt.pem \\\n--signature checksums.txt.sig \\\nchecksums.txt\n</code></pre></li> <li>If the signature is valid, you can then verify the SHA256 sums match with the downloaded binary:     <pre><code>sha256sum --ignore-missing -c checksums.txt\n</code></pre></li> </ol>"},{"location":"overview/install/#docker-images","title":"docker images","text":"<p>Our Docker images are signed with cosign.</p> <p>Verify the signatures:</p> <pre><code>COSIGN_EXPERIMENTAL=1 cosign verify xavidop/cxcli\n</code></pre>  <p>Info</p> <p>The <code>.pem</code> and <code>.sig</code> files are the image <code>name:tag</code>, replacing <code>/</code> and <code>:</code> with <code>-</code>.</p>"},{"location":"overview/install/#running-with-docker","title":"Running with Docker","text":"<p>You can also use it within a Docker container. To do that, you'll need to execute something more-or-less like the examples below.</p> <p>Registries:</p> <ul> <li><code>xavidop/cxcli</code></li> <li><code>ghcr.io/xavidop/cxcli</code></li> </ul> <p>Example usage:</p> <pre><code>docker run --rm \\\n    xavidop/cxcli cxcli version\n</code></pre> <p>Note that the image will almost always have the last stable Go version.</p> <p>If you need more things, you are encouraged to keep your own image. You can always use cxcli's own Dockerfile as an example though and iterate from that.</p>"},{"location":"overview/install/#compiling-from-source","title":"Compiling from source","text":"<p>Here you have two options:</p> <p>If you want to contribute to the project, please follow the steps on our contributing guide.</p> <p>If you just want to build from source for whatever reason, follow these steps:</p> <p>clone:</p> <pre><code>git clone https://github.com/xavidop/dialogflow-cx-cli\ncd dialogflow-cx-cli\n</code></pre> <p>get the dependencies:</p> <pre><code>go mod tidy\n</code></pre> <p>build:</p> <pre><code>go build -o cxcli .\n</code></pre> <p>verify it works:</p> <pre><code>./cxcli version\n</code></pre>"},{"location":"overview/roadmap/","title":"Roadmap","text":"<p><code>cxcli</code> is in active development. The core product is functioning.</p> <p>Our goal with the tool is to prove that there's market fit for a solution like this, and if so, we'll invest more time in automation, user experience, more features.</p> <p>For now, if you're interested in participating and giving feedback, we believe <code>cxcli</code> already solves pain at this stage.</p> <p>Shipped</p> <ul> <li> Available in homebrew, snapcraft, apt, yum, scoop, aur package managers </li> <li> Documentation updated</li> <li> Profile NLU</li> <li> Speech-to-text and Text-to-speech actions</li> <li> Container image available for multiple architectures</li> <li> SBOM files created</li> <li> Artifacts uploaded, signed and available on Github</li> </ul> <p>Coming soon:</p> <ul> <li> Continuous integration support</li> <li> Intents and entities actions (create, update)</li> <li> Support more environments (create, update) actions</li> <li> Support more agent actions (create, update, train)</li> </ul>"}]}